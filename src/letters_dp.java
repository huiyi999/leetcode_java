public class letters_dp {

    /**
     * 信件错排问题分析(动态规划)
     *
     * 问题描述
     *
     * 有 N 个信件和信箱，每封信件对应一个正确信箱位置。现在它们被打乱，求错误装信方式的数量。保证每一封信都装在错误的位置。
     *
     * 思路
     *
     * 抽象成动态规划问题
     *
     * 定义一个数组dp[]存储错误方式数量。dp[i]表示，有i封信、i个信箱情况下的错误装信方法总数。
     *
     * 转移方程建立
     *
     * 对于第N封信而言，假设其装在了第 K 个信箱中，对于第 K 封信，有两种情况，（1）信件 K 装在信箱 N 中；（2）信件 K 未被装在信箱 N 中。
     */

    private int MailMisalignment(int n){

        /**
         * 定义一个数组 dp 存储错误方式数量，dp[i] 表示前 i 个信和信封的错误方式数量。假设第 i 个信装到第 j 个信封里面，而第 j 个信装到第 k 个信封里面。根据 i 和 k 是否相等，有两种情况：
         *
         * i==k，交换 i 和 j 的信后，它们的信和信封在正确的位置，但是其余 i-2 封信有 dp[i-2] 种错误装信的方式。由于 j 有 i-1 种取值，因此共有 (i-1)*dp[i-2] 种错误装信方式。
         * i != k，交换 i 和 j 的信后，第 i 个信和信封在正确的位置，其余 i-1 封信有 dp[i-1] 种错误装信方式。由于 j 有 i-1 种取值，因此共有 (i-1)*dp[i-1] 种错误装信方式。
         * 综上所述，错误装信数量方式数量为：dp[i] = (i-1)*dp[i-2] + (i-1)*dp[i-1]
         */

        if(n==0 || n==1) return 0;
        int[] dp =new int[n];
        dp[0]=0;dp[1]=1;
        for(int i=2;i<n;i++){
            dp[i]=(i-1)*dp[i-2] + (i-1)*dp[i-1];
        }
        return dp[n-1];
    }

    public static void main(String[] args) {



    }
}
